The best practice to store the password is in encrypted format.

Spring Security Recommendation :-
	
	Spring Security recommends using the popular bcrypt algorithm.
	
	bcrypt -
		1.	Performs one-way encrypted hashing.
		2.	Adds a random ssalt to the password for additional protection.
		3.	Includes support to defeat brute force attacks.
		
		Why you should use bcrypt to hash passwords?
			https://medium.com/@danboterhoven/why-you-should-use-bcrypt-to-hash-passwords-af330100b861
		
		Detailed bcrypt algorithim analysis
			https://en.wikipedia.org/wiki/Bcrypt
			
		Password hashing - Best Practices
			https://crackstation.net/hashing-security.htm
		
	# You have a plaintext password and you want to encrypt using bcrypt
		1.	Use a website utility to perform the encryption
				https://www.bcryptcalculator.com/
					Enter the plaintext password and generate bcrypt password
				# Multiple runs will generate a different password due to random generating salting
		2.	Write Java code to perform the encryption
				{bcrypt}encodedPassword
				8+60
		
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------		
Development Process :-

	1.	Run SQL Script that contains encrypted passwords
			Modify DDL for password field, length should be 68
	2.	Modify database properties file to point to new database schema
	
Spring Security Login Process -

	1.	Retrieve password from db for the user
	2.	Read the encoding algorithim id(bcrypt etc)
	3.	For case of bcrypt, encrypt plaintext password from login form(using salt from db password)
	4.	Compare encrypted password from login form with encrypted password from db
	5.	If there is a match, login successful but if no match, not successful.
	
	# The password from db is never decrypted because bcrypt is a one-way encryption algorithm.
	
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

