1.	Create a new Java project named "spring-demo-one".

2.	Add the external JARs or create seperate folder libs having JARRs to add JARs of "spring-framework-5.2.7-Release".

3.	Create new class BaseballCoach.java and MyApp.java as main class, create the object of BaseballCoach.java in MyApp.java and run the program.

4.	Create interaface Coach.java which can be implemented by multiple classes. Run the program.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Spring Container - 
	 
	Primary functions-
		1.	Create and manage objects(Inversion of Control)
		2.	Inject object's dependency(Dependency Injection)
	
Configuring Spring Container -

	1.	XML configuration file
	2.	Java Annotations
	3.	Java Source Code
	
Spring Development Process -
	
	1.	Configure your spring beans	----- [].xml file
	2. 	Create a spring container	----- ApplicationContext and special implementations are ClassPathXmlApplicationContext, AnnotationConfigApplicationContext, GenricWebApplicationContext.
	3.	Retrieve beans from Spring Container	----- Use getBean method to retrieve bean from spring container
	
Spring Beans -
	
	1.	A spring bean is simply a java object. When java objects are created by the spring container, then spring refers to them as "Spring Beans".
	2.	The objects that form the backbone of your application and that are managed by IoC container are called beans.
	3.	A bean is an object that is intantiated, assembled and managed by spring IoC container.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

5.	Create applicationContext.xml file.

6.	Create HelloSpringApp.java as main class now. Perform the following steps -
		1.	Load the spring configuration file
		2.	Retrieve bean from spring container
		3.	Call methods on bean
		4.	Close the context
	Run the program.
		
7.	If you want to enable logging messages which are made internal in spring 5.1 framework, you have to create MyLoggerConfig.java file and provide the dependency in applicationContext.xml file.

		MyLoggerConfig.java -
			
			package com.udemy.springdemo;

			import java.util.logging.ConsoleHandler;
			import java.util.logging.Level;
			import java.util.logging.Logger;
			import java.util.logging.SimpleFormatter;

			import org.springframework.context.annotation.AnnotationConfigApplicationContext;

			public class MyLoggerConfig {

				private String rootLoggerLevel;
				private String printedLoggerLevel;
				
				public void setRootLoggerLevel(String rootLoggerLevel) {
					this.rootLoggerLevel = rootLoggerLevel;
				}

				public void setPrintedLoggerLevel(String printedLoggerLevel) {
					this.printedLoggerLevel = printedLoggerLevel;
				}

				public void initLogger() {

					// parse levels
					Level rootLevel = Level.parse(rootLoggerLevel);
					Level printedLevel = Level.parse(printedLoggerLevel);
					
					// get logger for app context
					Logger applicationContextLogger = Logger.getLogger(AnnotationConfigApplicationContext.class.getName());

					// get parent logger
					Logger loggerParent = applicationContextLogger.getParent();

					// set root logging level
					loggerParent.setLevel(rootLevel);
					
					// set up console handler
					ConsoleHandler consoleHandler = new ConsoleHandler();
					consoleHandler.setLevel(printedLevel);
					consoleHandler.setFormatter(new SimpleFormatter());
					
					// add handler to the logger
					loggerParent.addHandler(consoleHandler);
				}
				
			}
	
		Provide dependency in applicationContext.xml file -
			
			<bean id="myLoggerConfig" class="com.udemy.springdemo.MyLoggerConfig" init-method="initLogger">
				<property name="rootLoggerLevel" value="FINE" />
				<property name="printedLoggerLevel" value="FINE"/>
			</bean>
			
# We provide interface name with bean id because it provides a measure of type safety by throwing a BeanNotOfRequiredTypeException if the bean is not of required type. ClassCastException can't be thrown.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


