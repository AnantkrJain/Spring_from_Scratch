1.	Create a new Java project named "spring-demo-one".

2.	Add the external JARs or create seperate folder libs having JARRs to add JARs of "spring-framework-5.2.7-Release".

3.	Create new class BaseballCoach.java and MyApp.java as main class, create the object of BaseballCoach.java in MyApp.java and run the program.

4.	Create interaface Coach.java which can be implemented by multiple classes. Run the program.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Spring Container - 
	 
	Primary functions-
		1.	Create and manage objects(Inversion of Control)
		2.	Inject object's dependency(Dependency Injection)
	
Configuring Spring Container -

	1.	XML configuration file
	2.	Java Annotations
	3.	Java Source Code
	
Spring Development Process -
	
	1.	Configure your spring beans	----- [].xml file
	2. 	Create a spring container	----- ApplicationContext and special implementations are ClassPathXmlApplicationContext, AnnotationConfigApplicationContext, GenricWebApplicationContext.
	3.	Retrieve beans from Spring Container	----- Use getBean method to retrieve bean from spring container
	
Spring Beans -
	
	1.	A spring bean is simply a java object. When java objects are created by the spring container, then spring refers to them as "Spring Beans".
	2.	The objects that form the backbone of your application and that are managed by IoC container are called beans.
	3.	A bean is an object that is intantiated, assembled and managed by spring IoC container.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

5.	Create applicationContext.xml file.

6.	Create HelloSpringApp.java as main class now. Perform the following steps -
		1.	Load the spring configuration file
		2.	Retrieve bean from spring container
		3.	Call methods on bean
		4.	Close the context
	Run the program.
		
7.	If you want to enable logging messages which are made internal in spring 5.1 framework, you have to create MyLoggerConfig.java file and provide the dependency in applicationContext.xml file.

		MyLoggerConfig.java -
			
			package com.udemy.springdemo;

			import java.util.logging.ConsoleHandler;
			import java.util.logging.Level;
			import java.util.logging.Logger;
			import java.util.logging.SimpleFormatter;

			import org.springframework.context.annotation.AnnotationConfigApplicationContext;

			public class MyLoggerConfig {

				private String rootLoggerLevel;
				private String printedLoggerLevel;
				
				public void setRootLoggerLevel(String rootLoggerLevel) {
					this.rootLoggerLevel = rootLoggerLevel;
				}

				public void setPrintedLoggerLevel(String printedLoggerLevel) {
					this.printedLoggerLevel = printedLoggerLevel;
				}

				public void initLogger() {

					// parse levels
					Level rootLevel = Level.parse(rootLoggerLevel);
					Level printedLevel = Level.parse(printedLoggerLevel);
					
					// get logger for app context
					Logger applicationContextLogger = Logger.getLogger(AnnotationConfigApplicationContext.class.getName());

					// get parent logger
					Logger loggerParent = applicationContextLogger.getParent();

					// set root logging level
					loggerParent.setLevel(rootLevel);
					
					// set up console handler
					ConsoleHandler consoleHandler = new ConsoleHandler();
					consoleHandler.setLevel(printedLevel);
					consoleHandler.setFormatter(new SimpleFormatter());
					
					// add handler to the logger
					loggerParent.addHandler(consoleHandler);
				}
				
			}
	
		Provide dependency in applicationContext.xml file -
			
			<bean id="myLoggerConfig" class="com.udemy.springdemo.MyLoggerConfig" init-method="initLogger">
				<property name="rootLoggerLevel" value="FINE" />
				<property name="printedLoggerLevel" value="FINE"/>
			</bean>
			
# We provide interface name with bean id because it provides a measure of type safety by throwing a BeanNotOfRequiredTypeException if the bean is not of required type. ClassCastException can't be thrown.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Spring Dependency Injection :-

	Injection Types -
	
		There are many types of injection with Spring. We will cover the two most common -
			1.	Constructor Injection
			2.	Setter Injection
			
		Constructor Injection -
		
		1.	Define the dependency interface and class.
		2.	Create a constructor in your class for injections.
		3.	Configure the dependency injection in Spring config file.
		
		Setter Injection -
		
		1.	Create setter methods in your class for injections.
		2.	Configure the dependency injection in Spring config file.
		
		Injecting Literal Values -
		
		1.	Create setter methods in your class for injections.
		2.	Configure the injection in Spring config file.
		
		Injecting values from Properties file-

		1.	Create Properties file.
		2.	Load Properties file in Spring configuration file
		3.	Reference values from Properties file
		
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Spring Bean Scopes and Lifecycle :-

	Scope - Scope refers to the lifecycle of the bean.
				1.	How long does the bean live.
				2.	How many instances are created.
				3. 	How is the bean shared.
				
	# Default scope for bean is singleton.

	Singleton - 
		
		1. 	Spring container creates only one instance of the bean bydefault.
		2.	It is cached in memory.
		3. 	All requests for the bean will return a shared reference to the same bean. (that's why bean is stateless)
		
	Scope				Description
	
	singleton			Create a single shared instance of the bean. (staeless)
	prototype			Creates a new bean instance for each container request. (stateful)
	request				Scoped to an HTTP web request. Only used for web apps.
	session				Scoped to an HTTP web session. Only used for web apps.
	global-session		Scoped to a global HTTP web session. Only used for web apps.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++	
	
1.	Create beanScope-applicationContext.xml file having fortuneService and Coach as dependency.

2.	Create a new class BeanScopeDemoApp.java class.

3.	Provide the scope for the bean.

4.	In BeanScopeDemoApp.java, check either the reference for bean is same or different for particular scope.


Bean Lifecycle Methods -

	Container Started --------> Bean Instantiated ------> Dependencies Injected ------> Internal Spring Processing -------> Your Custom Init Method --------> Bean is Ready for use | Container is shutdown
	-----------------> Your Custom Destroy Methods --> STOP
	
		You can add custom code during bean initialization and bean destruction.
			1.	Calling custom business logic methods
			2.	Setting up/Clean up handles to resources(db, socket, files etc)
			
		# These are called Hooks. 'init-method' or 'destroy-method' is used to add your custom code.
			1. 	Both the methods can have any access modifiers(public, protected or private)
			2. 	The method can have any return type.
			3. 	The method can have any method name.
			4.	The method can't accept any arguments.
			 
	
	1.	Define your methods for init and destroy.
	2.	Configure the method names in spring configuration file.
	
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	