Java Annotations :-

	1.	Special labels/markers added to Java class
	2.	Provide meta-data about class
	3.	Processed at compile-time or run-time for special processing
	
	#If you have 100 beans or 1000 beans, it will be very verbose to write each and every bean in config file. Annotation minimizes the XML configuration.
	
	#Spring will scan your java classes for @Component annotation and automatically register the beans in spring container.
	
	Development Process -
		1.	Enable component scanning in spring config file
		2. 	Add the @Component Annotation to your java class
		3. 	Retrieve bean from spring container.
		
		# If we don't provide any bean id, default bean id will be generated. Bean id will be the class name having first letter lower-case.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Spring Dependency Injection with Annotation and Autowiring -

	For dependency, Spring can use auto wiring. Spring will look for a class the matches the property; matches by type[class or interface]. Spring will inject it hence it is autowired.

	Autowiring Injection Types -
		1.	Constructor Injection
		2.	Setter Injection
		3.	Field Injection
		
		Constructor Injection -
			1.	Define the dependency interface and class.
			2.	Create a constructor in your class for injection.
			3.	Configure the dependency injection with @Autowired annotation.
		
		# As of Spring Framework 4.3, an @Autowired annotation such a constructor is no longer necessary if target bean defines only one constructor to begin with. However, if several constructors are available, atleast one must be annotated to teach the container which one to use.

		Setter Injection -
			1.	Create setter methods in your class for injection.
			2.	Configure the dependency injection with @Autowired annotation.
			
		Field Injection -
			Inject dependencies by setting field values on your class directly, even private fields. [Accomplished by Java Reflection]
			
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
Spring Bean Scopes and Lifecycle :-

	Scope - Scope refers to the lifecycle of the bean.
				1.	How long does the bean live.
				2.	How many instances are created.
				3. 	How is the bean shared.
				
	# Default scope for bean is singleton.

	Singleton - 
		
		1. 	Spring container creates only one instance of the bean bydefault.
		2.	It is cached in memory.
		3. 	All requests for the bean will return a shared reference to the same bean. (that's why bean is stateless)
		
	Scope				Description
	
	singleton			Create a single shared instance of the bean. (staeless)
	prototype			Creates a new bean instance for each container request. (stateful)
	request				Scoped to an HTTP web request. Only used for web apps.
	session				Scoped to an HTTP web session. Only used for web apps.
	global-session		Scoped to a global HTTP web session. Only used for web apps.
		
	Bean Lifecycle Methods -

	Container Started --------> Bean Instantiated ------> Dependencies Injected ------> Internal Spring Processing -------> Your Custom Init Method --------> Bean is Ready for use | Container is shutdown
	-----------------> Your Custom Destroy Methods --> STOP
	
		You can add custom code during bean initialization and bean destruction.
			1.	Calling custom business logic methods
			2.	Setting up/Clean up handles to resources(db, socket, files etc)		
			
	Development Process -
	1.	Define your methods for init and destroy.
	2.	Add annotations: @PostConstruct and @PreDestroy
			
		1. 	Both the methods can have any access modifiers(public, protected or private)
		2. 	The method can have any return type.
		3. 	The method can have any method name.
		4.	The method can't accept any arguments.

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


Spring Configuration for Java Code(no XML) :-

	Instead of configuring Spring container using XML, configure the spring container with Java code.
	
	Development Process -
		1.	Create a Java class and annotate as @Configuration
		2.	Add component scanning support: @ComponentScan (optional)
		3.	Read Spring Java configuration file
		4.	Retrieve bean from Spring container.
	
	********************************************************************************************************************************************************************************************************
	
	3 Ways of configuring spring container -
	
		1.	Full XML Configuration
		2.	XML Component Scan
		3.	Java configuration Class
		
	********************************************************************************************************************************************************************************************************
	
	Spring Beans with Java Code(no XML) :-
	
		Development Process -
			1.	Define method to expose bean
			2.	Inject bean dependencies
			3.	Read Spring Java configuration class
			4.	Retrieve bean from spring container.
		
		Q->	How @Bean works behind the scenes?
		A->	If method has bean annotation, the annotation will intercept all calls to the method. Since no scope is specified, the annotation uses singleton scope. Behind the scenes, during the @Bean interception, it will check in-memory of the Spring container (applicationContext) and see if this given bean has already been created. 
				If this is the first time the bean has been created then it will execute the method as normal. It will also register the bean in the application context. The next time method is called, @Bean annotation will check in-memory of spring container and see if this given bean is already created. Since bean has already been created, then it will immediately return the instance from memory. 
				
	Injecting Values from properties files -
	
		Development Process -
			1.	Create Properties File
			2.	Load properties file in Spring config
			3.	Reference values from Properties File
			
		# In Spring version 4.3+, @PropertySource("classpath:[FileName].properties") will work fine but for previous versions, you have to add dependency for the same.
			@Bean
			public static PropertySourcesPlaceholderConfigurer
                    propertySourcesPlaceHolderConfigurer() {
						return new PropertySourcesPlaceholderConfigurer();
			}

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
			
	